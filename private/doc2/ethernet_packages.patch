diff --git a/apps/Settings/res/layout/ethernet_static_ip_dialog.xml b/apps/Settings/res/layout/ethernet_static_ip_dialog.xml
new file mode 100755
index 0000000..3319e9e
--- /dev/null
+++ b/apps/Settings/res/layout/ethernet_static_ip_dialog.xml
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical"
+        android:paddingLeft="20dp"
+        android:paddingTop="12dp"
+        android:paddingRight="20dp"
+        android:paddingBottom="12dp">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="3dp"
+            android:text="@string/ethernet_ip_address" />
+
+        <EditText
+            android:id="@+id/ethernet_ip_address"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="192.168.192.57" />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="3dp"
+            android:text="@string/ethernet_gateway" />
+
+        <EditText
+            android:id="@+id/ethernet_gateway"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="192.168.192.1" />
+
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="3dp"
+            android:text="@string/ethernet_netmask" />
+
+        <EditText
+            android:id="@+id/ethernet_netmask"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="1dp"
+            android:hint="255.255.255.0" />
+
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="3dp"
+            android:text="@string/ethernet_dns1" />
+
+        <EditText
+            android:id="@+id/ethernet_dns1"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="192.168.192.1" />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="3dp"
+            android:text="@string/ethernet_dns2" />
+
+        <EditText
+            android:id="@+id/ethernet_dns2"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="114.114.114.114" />
+
+    </LinearLayout>
+</ScrollView>
\ No newline at end of file
diff --git a/apps/Settings/res/values-zh-rCN/arrays.xml b/apps/Settings/res/values-zh-rCN/arrays.xml
index ba47a51..ce3522d 100755
--- a/apps/Settings/res/values-zh-rCN/arrays.xml
+++ b/apps/Settings/res/values-zh-rCN/arrays.xml
@@ -568,4 +568,8 @@
     <item msgid="6131821495505931173">"红色"</item>
   </string-array>
     <!-- no translation found for usb_configuration_titles:0 (292902998500371970) -->
+  <string-array name="ethernet_ip_mode_entries">
+    <item>"动态获取"</item>
+    <item>"静态地址"</item>
+  </string-array>
 </resources>
diff --git a/apps/Settings/res/values-zh-rCN/strings.xml b/apps/Settings/res/values-zh-rCN/strings.xml
index 9601d8e..94d8bd9 100755
--- a/apps/Settings/res/values-zh-rCN/strings.xml
+++ b/apps/Settings/res/values-zh-rCN/strings.xml
@@ -16,6 +16,23 @@

 <resources xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="ethernet_settings_title">"以太网"</string>
+    <string name="ethernet_settings">"以太网"</string>
+    <string name="ethernet_enable">"已启用"</string>
+    <string name="ethernet_disable">"已禁用"</string>
+    <string name="ethernet_ip_address">"IP地址"</string>
+    <string name="ethernet_netmask">"子网掩码"</string>
+    <string name="ethernet_gateway">"网关"</string>
+    <string name="ethernet_dns1">"首选 DNS 服务器"</string>
+    <string name="ethernet_dns2">"备选 DNS 服务器"</string>
+    <string name="ethernet_loading_tips">"获取中..."</string>
+    <string name="ethernet_ip_mode">"以太网IP模式"</string>
+    <string name="ethernet_ip_dhcp">"动态获取"</string>
+    <string name="ethernet_ip_static">"静态地址"</string>
+    <string name="ethernet_ip_static_cancel_button">"取消"</string>
+    <string name="ethernet_ip_static_connect_button">"连接"</string>
+    <string name="ethernet_ip_settings_invalid_ip">"请填写正确的格式"</string>
+
     <string name="yes" msgid="4676390750360727396">"是"</string>
     <string name="no" msgid="6731231425810196216">"否"</string>
     <string name="create" msgid="3578857613172647409">"创建"</string>
diff --git a/apps/Settings/res/values/arrays.xml b/apps/Settings/res/values/arrays.xml
index 2a6675e..afacb9d 100755
--- a/apps/Settings/res/values/arrays.xml
+++ b/apps/Settings/res/values/arrays.xml
@@ -1392,4 +1392,13 @@
         <item>0</item>
     </string-array>

+    <string-array name="ethernet_ip_mode_entries">
+        <item>dhcp</item>
+        <item>static</item>
+    </string-array>
+
+    <string-array name="ethernet_ip_mode_values" translatable="false">
+        <item>dhcp</item>
+        <item>manual</item>
+    </string-array>
 </resources>
diff --git a/apps/Settings/res/values/strings.xml b/apps/Settings/res/values/strings.xml
index 1dbbbef..d61a857 100755
--- a/apps/Settings/res/values/strings.xml
+++ b/apps/Settings/res/values/strings.xml
@@ -14,6 +14,23 @@
      limitations under the License.
 -->
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="ethernet_settings_title">"Ethernet"</string>
+    <string name="ethernet_settings">"Ethernet"</string>
+    <string name="ethernet_enable">"ethernet is enable"</string>
+    <string name="ethernet_disable">"ethernet is disable"</string>
+    <string name="ethernet_ip_address">"IP address"</string>
+    <string name="ethernet_netmask">"Netmask"</string>
+    <string name="ethernet_gateway">"Gateway"</string>
+    <string name="ethernet_dns1">"DNS server1"</string>
+    <string name="ethernet_dns2">"DNS server2"</string>
+    <string name="ethernet_loading_tips">"loading..."</string>
+    <string name="ethernet_ip_mode">"Ethernet ip mode"</string>
+    <string name="ethernet_ip_dhcp">"dpcp"</string>
+    <string name="ethernet_ip_static">"static"</string>
+    <string name="ethernet_ip_static_cancel_button">"cancel"</string>
+    <string name="ethernet_ip_static_connect_button">"connect"</string>
+    <string name="ethernet_ip_settings_invalid_ip">"Please fill in the correct format."</string>
+
     <!-- Strings for Dialog yes button -->
     <string name="yes">"Yes"</string>
     <!-- Strings for Dialog no button -->
diff --git a/apps/Settings/res/xml/ethernet_settings.xml b/apps/Settings/res/xml/ethernet_settings.xml
new file mode 100755
index 0000000..f47bbf0
--- /dev/null
+++ b/apps/Settings/res/xml/ethernet_settings.xml
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--$_FOR_ROCKCHIP_RBOX_$--><!--$_rbox_$_modify_$_chenzhi_20120309: add for ethernet--><!-- Copyright (C) 2008 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    android:title="@string/ethernet_settings">
+
+    <SwitchPreference
+        android:key="ethernet_settings"
+        android:persistent="false"
+        android:summary="@string/ethernet_enable"
+        android:title="@string/ethernet_settings" />
+
+    <Preference
+        android:key="ethernet_ip_address"
+        android:title="@string/ethernet_ip_address"
+        android:summary="0.0.0.0"/>
+
+    <Preference
+        android:key="ethernet_netmask"
+        android:title="@string/ethernet_netmask"
+        android:summary="0.0.0.0"/>
+
+    <Preference
+        android:key="ethernet_gateway"
+        android:title="@string/ethernet_gateway"
+        android:summary="0.0.0.0"/>
+
+    <Preference
+        android:key="ethernet_dns1"
+        android:title="@string/ethernet_dns1"
+        android:summary="0.0.0.0"/>
+
+    <Preference
+        android:key="ethernet_dns2"
+        android:title="@string/ethernet_dns2"
+        android:summary="0.0.0.0"/>
+
+    <ListPreference
+        android:entries="@array/ethernet_ip_mode_entries"
+        android:entryValues="@array/ethernet_ip_mode_values"
+        android:key="ethernet_ip_mode"
+        android:persistent="false"
+        android:summary="@string/ethernet_ip_dhcp"
+        android:title="@string/ethernet_ip_mode" />
+
+</PreferenceScreen>
diff --git a/apps/Settings/res/xml/wireless_settings.xml b/apps/Settings/res/xml/wireless_settings.xml
old mode 100644
new mode 100755
index f08de5e..040d76e
--- a/apps/Settings/res/xml/wireless_settings.xml
+++ b/apps/Settings/res/xml/wireless_settings.xml
@@ -4,9 +4,9 @@
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
-
+
           http://www.apache.org/licenses/LICENSE-2.0
-
+
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -52,6 +52,11 @@
         android:title="@string/vpn_settings_title" />

     <PreferenceScreen
+        android:fragment="com.android.settings.ethernet.EthernetSettings"
+        android:key="ethernet_settings"
+        android:title="@string/ethernet_settings_title" />
+
+    <PreferenceScreen
         android:key="mobile_network_settings"
         android:title="@string/network_settings_title"
         settings:keywords="@string/keywords_more_mobile_networks"
diff --git a/apps/Settings/src/com/android/settings/ethernet/EthernetSettings.java b/apps/Settings/src/com/android/settings/ethernet/EthernetSettings.java
new file mode 100755
index 0000000..7003ac6
--- /dev/null
+++ b/apps/Settings/src/com/android/settings/ethernet/EthernetSettings.java
@@ -0,0 +1,417 @@
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.ethernet;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.net.EthernetInfo;
+import android.net.EthernetManager;
+import android.os.Bundle;
+import android.os.Handler;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.PreferenceScreen;
+import android.preference.SwitchPreference;
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import com.android.internal.logging.MetricsLogger;
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+import java.io.File;
+import java.lang.reflect.Field;
+
+public class EthernetSettings extends SettingsPreferenceFragment implements
+        Preference.OnPreferenceChangeListener {
+    private static final String TAG = "EthernetSettings";
+
+    private static final String KEY_ETHERNET_SETTINGS = "ethernet_settings";
+    private static final String KEY_ETHERNET_IP_ADDRESS = "ethernet_ip_address";
+    private static final String KEY_ETHERNET_NETMASK = "ethernet_netmask";
+    private static final String KEY_ETHERNET_GATEWAY = "ethernet_gateway";
+    private static final String KEY_ETHERNET_DNS1 = "ethernet_dns1";
+    private static final String KEY_ETHERNET_DNS2 = "ethernet_dns2";
+    private static final String KEY_ETHERNET_IP_MODE = "ethernet_ip_mode";
+
+    private int ETHERNET_SETTINGS_XML = R.xml.ethernet_settings;
+
+    private SwitchPreference mEthernetSettingsPreference;
+    private Preference mEthernetIPAdressPreference;
+    private Preference mEthernetNetmaskPreference;
+    private Preference mEthernetGatewayPreference;
+    private Preference mEthernetDNS1Preference;
+    private Preference mEthernetDNS2Preference;
+    private ListPreference mEthernetModePreference;
+
+    private View mDialogView;
+    private AlertDialog.Builder mBuilder;
+    private AlertDialog mDialog;
+    private int ETHERNET_STATIC_IP_DIALOG_XML = R.layout.ethernet_static_ip_dialog;
+    private int ID_EDITTEXT_ETHERNET_IP_ADDRESS = R.id.ethernet_ip_address;
+    private int ID_EDITTEXT_ETHERNET_IP_GATEWAY = R.id.ethernet_gateway;
+    private int ID_EDITTEXT_ETHERNET_IP_NETMASK = R.id.ethernet_netmask;
+    private int ID_EDITTEXT_ETHERNET_IP_DNS1 = R.id.ethernet_dns1;
+    private int ID_EDITTEXT_ETHERNET_IP_DNS2 = R.id.ethernet_dns2;
+    private EditText mEthernetIPAdressEditText;
+    private EditText mEthernetNetmaskEditText;
+    private EditText mEthernetGatewayEditText;
+    private EditText mEthernetDNS1EditText;
+    private EditText mEthernetDNS2EditText;
+    private String ipAddress;
+    private String netMask;
+    private String gateWay;
+    private String dns1;
+    private String dns2;
+    private TextWatcher mTextWatcher = new TextWatcher() {
+        @Override
+        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+        }
+
+        @Override
+        public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+        }
+
+        @Override
+        public void afterTextChanged(Editable s) {
+            setDialogCanConnect();
+        }
+    };
+
+    private EthernetManager mEthernetManager;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        addPreferencesFromResource(ETHERNET_SETTINGS_XML);
+
+        mEthernetManager = (EthernetManager) getSystemService(Context.ETHERNET_SERVICE);
+
+        mEthernetSettingsPreference = (SwitchPreference) findPreference(KEY_ETHERNET_SETTINGS);
+        mEthernetSettingsPreference.setOnPreferenceChangeListener(this);
+        boolean isEthernetEnabled = mEthernetManager.isEthernetEnabled();
+        if (isEthernetEnabled) {
+            mEthernetSettingsPreference.setChecked(true);
+        } else {
+            mEthernetSettingsPreference.setChecked(false);
+        }
+        File f = new File("sys/class/net/eth0/address");
+        if (f.exists()) {
+            mEthernetSettingsPreference.setEnabled(true);
+        } else {
+            mEthernetSettingsPreference.setEnabled(false);
+        }
+        mEthernetSettingsPreference.setSummary(isEthernetEnabled ? getResources().getString(R.string.ethernet_enable) : getResources().getString(R.string.ethernet_disable));
+
+        mEthernetIPAdressPreference = findPreference(KEY_ETHERNET_IP_ADDRESS);
+
+        mEthernetNetmaskPreference = findPreference(KEY_ETHERNET_NETMASK);
+
+        mEthernetGatewayPreference = findPreference(KEY_ETHERNET_GATEWAY);
+
+        mEthernetDNS1Preference = findPreference(KEY_ETHERNET_DNS1);
+
+        mEthernetDNS2Preference = findPreference(KEY_ETHERNET_DNS2);
+
+        refreshEthernetInfo(800);
+
+        mEthernetModePreference = (ListPreference) findPreference(KEY_ETHERNET_IP_MODE);
+        mEthernetModePreference.setEnabled(mEthernetManager.isEthernetEnabled());
+        mEthernetModePreference.setOnPreferenceChangeListener(this);
+        boolean isEthernetStaticIP = mEthernetManager.isEthernetStaticMode();
+        mEthernetModePreference.setSummary(getResources().getString(isEthernetStaticIP ? R.string.ethernet_ip_static : R.string.ethernet_ip_dhcp));
+        mEthernetModePreference.setValue(isEthernetStaticIP ? EthernetManager.ETHERNET_IP_MODE_STATIC : EthernetManager.ETHERNET_IP_MODE_DHCP);
+
+        LayoutInflater inflater = (LayoutInflater)
+                getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+        EthernetInfo info = mEthernetManager.getManualSavedConifg();
+        mDialogView = inflater.inflate(ETHERNET_STATIC_IP_DIALOG_XML, null);
+
+        mEthernetIPAdressEditText = (EditText) mDialogView.findViewById(ID_EDITTEXT_ETHERNET_IP_ADDRESS);
+        mEthernetIPAdressEditText.addTextChangedListener(mTextWatcher);
+        ipAddress = info.getIpAddress();
+        if (!TextUtils.isEmpty(ipAddress)) {
+            mEthernetIPAdressEditText.setText(ipAddress);
+        }
+
+        mEthernetGatewayEditText = (EditText) mDialogView.findViewById(ID_EDITTEXT_ETHERNET_IP_GATEWAY);
+        mEthernetGatewayEditText.addTextChangedListener(mTextWatcher);
+        gateWay = info.getGateway();
+        if (!TextUtils.isEmpty(gateWay)) {
+            mEthernetGatewayEditText.setText(gateWay);
+        }
+
+        mEthernetNetmaskEditText = (EditText) mDialogView.findViewById(ID_EDITTEXT_ETHERNET_IP_NETMASK);
+        mEthernetNetmaskEditText.addTextChangedListener(mTextWatcher);
+        netMask = info.getNetmask();
+        if (!TextUtils.isEmpty(netMask)) {
+            mEthernetNetmaskEditText.setText(netMask);
+        }
+
+        mEthernetDNS1EditText = (EditText) mDialogView.findViewById(ID_EDITTEXT_ETHERNET_IP_DNS1);
+        mEthernetDNS1EditText.addTextChangedListener(mTextWatcher);
+        dns1 = info.getDns1();
+        if (!TextUtils.isEmpty(dns1)) {
+            mEthernetDNS1EditText.setText(dns1);
+        }
+
+        mEthernetDNS2EditText = (EditText) mDialogView.findViewById(ID_EDITTEXT_ETHERNET_IP_DNS2);
+        mEthernetDNS2EditText.addTextChangedListener(mTextWatcher);
+        dns2 = info.getDns2();
+        if (!TextUtils.isEmpty(dns2)) {
+            mEthernetDNS2EditText.setText(dns2);
+        }
+
+        mBuilder = new AlertDialog.Builder(getContext())
+                .setTitle(R.string.ethernet_ip_mode)
+                .setView(mDialogView)
+                .setPositiveButton(R.string.ethernet_ip_static_connect_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        connect(dialog);
+                    }
+                }).setNegativeButton(R.string.ethernet_ip_static_cancel_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        closeDialog(dialog);
+                        mEthernetModePreference.setSummary(getResources().getString(R.string.ethernet_ip_dhcp));
+                        mEthernetModePreference.setValue(EthernetManager.ETHERNET_IP_MODE_DHCP);
+                    }
+                }).setCancelable(false);
+    }
+
+    private void refreshEthernetInfo(long delay) {
+        if (mEthernetSettingsPreference.isChecked()) {
+            mEthernetIPAdressPreference.setSummary(R.string.ethernet_loading_tips);
+            mEthernetGatewayPreference.setSummary(R.string.ethernet_loading_tips);
+            mEthernetNetmaskPreference.setSummary(R.string.ethernet_loading_tips);
+            mEthernetDNS1Preference.setSummary(R.string.ethernet_loading_tips);
+            mEthernetDNS2Preference.setSummary(R.string.ethernet_loading_tips);
+            new Handler().postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    EthernetInfo info = mEthernetManager.getEthernetInfo();
+                    mEthernetIPAdressPreference.setSummary(info.getIpAddress());
+                    mEthernetGatewayPreference.setSummary(info.getGateway());
+                    mEthernetNetmaskPreference.setSummary(info.getNetmask());
+                    mEthernetDNS1Preference.setSummary(info.getDns1());
+                    mEthernetDNS2Preference.setSummary(info.getDns2());
+                }
+            }, delay);
+         } else {
+            mEthernetIPAdressPreference.setSummary("0.0.0.0");
+            mEthernetGatewayPreference.setSummary("0.0.0.0");
+            mEthernetNetmaskPreference.setSummary("0.0.0.0");
+            mEthernetDNS1Preference.setSummary("0.0.0.0");
+            mEthernetDNS2Preference.setSummary("0.0.0.0");
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+    }
+
+    @Override
+    protected int getMetricsCategory() {
+        return MetricsLogger.ETHERNET;
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen screen, Preference preference) {
+        return super.onPreferenceTreeClick(screen, preference);
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        if (preference == mEthernetSettingsPreference) {
+            boolean value = (Boolean) objValue;
+            mEthernetManager.setEthernetEnabled(value);
+            mEthernetSettingsPreference.setChecked(value);
+            mEthernetSettingsPreference.setSummary(value ? getResources().getString(R.string.ethernet_enable) : getResources().getString(R.string.ethernet_disable));
+            mEthernetModePreference.setEnabled(mEthernetManager.isEthernetEnabled());
+            refreshEthernetInfo(1500);
+        }
+        if (KEY_ETHERNET_IP_MODE.equals(preference.getKey())) {
+            try {
+                String value = ((String) objValue);
+                if (value.equals(EthernetManager.ETHERNET_IP_MODE_STATIC)) {
+                    ViewGroup mParent = (ViewGroup) mDialogView.getParent();
+                    if (mParent != null) {
+                        mParent.removeAllViews();
+                    }
+                    mDialog = mBuilder.show();
+                    setDialogCanConnect();
+                } else if (value.equals(EthernetManager.ETHERNET_IP_MODE_DHCP)) {
+                    mEthernetManager.setEthernetIPMode(EthernetManager.ETHERNET_IP_MODE_DHCP, null);
+                    mEthernetModePreference.setValue(EthernetManager.ETHERNET_IP_MODE_DHCP);
+                    mEthernetModePreference.setSummary(getResources().getString(R.string.ethernet_ip_dhcp));
+                    refreshEthernetInfo(1500);
+                }
+            } catch (NumberFormatException e) {
+                Log.e(TAG, "could not persist screen timeout setting", e);
+            }
+        }
+        return true;
+    }
+
+    private void keepDialog(DialogInterface mDialogLongInterface) {
+        try {
+            Field field = mDialogLongInterface.getClass().getSuperclass().getDeclaredField("mShowing");
+            field.setAccessible(true);//将mShowing设置为false表示对话框已关闭
+            field.set(mDialogLongInterface, false);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+
+    private void closeDialog(DialogInterface mDialogInterface) {
+        try {
+            Field field = mDialogInterface.getClass().getSuperclass().getDeclaredField("mShowing");
+            field.setAccessible(true);
+            field.set(mDialogInterface, true);
+            mDialogInterface.dismiss();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    private void setDialogCanConnect() {
+        if (mEthernetIPAdressEditText != null) {
+            ipAddress = mEthernetIPAdressEditText.getText().toString();
+        }
+        if (mEthernetGatewayEditText != null) {
+            gateWay = mEthernetGatewayEditText.getText().toString();
+        }
+        if (mEthernetNetmaskEditText != null) {
+            netMask = mEthernetNetmaskEditText.getText().toString();
+        }
+        if (mEthernetDNS1EditText != null) {
+            dns1 = mEthernetDNS1EditText.getText().toString();
+        }
+        if (mEthernetDNS2EditText != null) {
+            dns2 = mEthernetDNS2EditText.getText().toString();
+        }
+        if (!TextUtils.isEmpty(ipAddress) && !TextUtils.isEmpty(gateWay) && !TextUtils.isEmpty(netMask)
+                && (!TextUtils.isEmpty(dns1) || !TextUtils.isEmpty(dns2))) {
+            if (mDialog != null)
+                mDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(true);
+        } else {
+            if (mDialog != null)
+                mDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(false);
+        }
+    }
+
+    private void connect(DialogInterface dialog) {
+        ipAddress = mEthernetIPAdressEditText.getText().toString();
+        if (TextUtils.isEmpty(ipAddress) || !isValidIpAddress(ipAddress)) {
+            Toast.makeText(getActivity(), R.string.ethernet_ip_settings_invalid_ip, Toast.LENGTH_LONG).show();
+            keepDialog(dialog);
+            return;
+        }
+        gateWay = mEthernetGatewayEditText.getText().toString();
+        if (TextUtils.isEmpty(gateWay) || !isValidIpAddress(gateWay)) {
+            Toast.makeText(getActivity(), R.string.ethernet_ip_settings_invalid_ip, Toast.LENGTH_LONG).show();
+            keepDialog(dialog);
+            return;
+        }
+        netMask = mEthernetNetmaskEditText.getText().toString();
+        if (TextUtils.isEmpty(netMask) || !isValidIpAddress(netMask)) {
+            Toast.makeText(getActivity(), R.string.ethernet_ip_settings_invalid_ip, Toast.LENGTH_LONG).show();
+            keepDialog(dialog);
+            return;
+        }
+        dns1 = mEthernetDNS1EditText.getText().toString();
+        if (TextUtils.isEmpty(dns1) || !isValidIpAddress(dns1)) {
+            Toast.makeText(getActivity(), R.string.ethernet_ip_settings_invalid_ip, Toast.LENGTH_LONG).show();
+            keepDialog(dialog);
+            return;
+        }
+        dns2 = mEthernetDNS2EditText.getText().toString();
+        if (!TextUtils.isEmpty(dns2) && !isValidIpAddress(dns2)) {
+            Toast.makeText(getActivity(), R.string.ethernet_ip_settings_invalid_ip, Toast.LENGTH_LONG).show();
+            keepDialog(dialog);
+            return;
+        }
+
+        EthernetInfo info = new EthernetInfo();
+        info.setIpAddress(ipAddress);
+        info.setGateway(gateWay);
+        info.setNetmask(netMask);
+        info.setDns1(dns1);
+        info.setDns2(dns2);
+
+        mEthernetManager.setEthernetIPMode(EthernetManager.ETHERNET_IP_MODE_STATIC, info);
+        mEthernetModePreference.setSummary(getResources().getString(R.string.ethernet_ip_static));
+        mEthernetModePreference.setValue(EthernetManager.ETHERNET_IP_MODE_STATIC);
+
+        closeDialog(dialog);
+
+        refreshEthernetInfo(1500);
+    }
+
+    private boolean isValidIpAddress(String value) {
+
+        int start = 0;
+        int end = value.indexOf('.');
+        int numBlocks = 0;
+
+        while (start < value.length()) {
+
+            if (-1 == end) {
+                end = value.length();
+            }
+
+            try {
+                int block = Integer.parseInt(value.substring(start, end));
+                if ((block > 255) || (block < 0)) {
+                    Log.e(TAG, "isValidIpAddress() : invalid 'block', block = " + block);
+                    return false;
+                }
+            } catch (NumberFormatException e) {
+                Log.e(TAG, "isValidIpAddress() : e = " + e);
+                return false;
+            }
+
+            numBlocks++;
+
+            start = end + 1;
+            end = value.indexOf('.', start);
+        }
+
+        return numBlocks == 4;
+    }
+}
+
